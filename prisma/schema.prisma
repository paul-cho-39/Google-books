generator client {
  provider = "prisma-client-js"
  // previewFeatures: ["clientExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// This schema represents a book tracking system and a simple rating system. Users can log their 
// reading progress from a simple list of 'BookState', comprised of three different states: 
// Want, Reading, and Finished. 
// *Their reading logs are not yet updated on the UI, as of yet.
// Another feature is rating the system from lists of books without adding to their library

// can add logs for later 
// model Log {
//     id           Int        @id @default(autoincrement())
//     start        DateTime[]
//     end          DateTime[]
//     dayOfTheWeek String[]
//     pagesRead   Int?
//     userId        String 
//     bookId       String
//     userBook      UserBook    @relation(fields: [userId, bookId], references: [bookId, userId])

//     @@map("reading_logs")
//     @@unique([userId, bookId, id])
// }

// Represents a user's rating for a specific book.
// Each user can rate a book only once but can update their rating.
model Rating {
  id          Int      @id @default(autoincrement())
  userId      String
  bookId      String
  ratingValue Int
  dateAdded   DateTime @default(now())
  dateUpdated DateTime @updatedAt
  reviewTitle String?  @db.VarChar(150)
  comment     String?  @db.VarChar(500)
  user        User     @relation(fields: [userId], references: [id])
  book        Book     @relation(fields: [bookId], references: [id])

  @@unique([userId, bookId])
  @@map("ratings")
}

// Represents a book with details
model Book {
  id                  String     @unique
  title               String
  subtitle            String?
  publishedDate       DateTime?  @map("pub_date")
  categories          String[]
  language            String?
  pageCount           Int?
  industryIdentifiers Json?
  authors             String[]
  isDeleted           Boolean    @default(false)
  dateDeleted         DateTime?
  users               UserBook[]
  ratings             Rating[]

  @@index([id], type: Hash)
  @@map("books")
}

enum BookState {
  Want
  Reading
  Finished
}

// This model is used as an intermediary model for connecting Book and User
// Also a model for user-specific details like the 'BookState', 'Logs' and 'Rating'
// When adding additional details it would likely be added here

// primary and primaryAdded is required if the book is to be logged in "Log" 
// when Log is written then primary and primaryAdded is automatically added
// and if 'BookState' is in 'want' it is changed to 'reading'
model UserBook {
  userId            String
  bookId            String
  state             BookState
  dateAdded         DateTime  @default(now())
  dateStarted       DateTime?
  dateFinished      DateTime?
  dateFinishedYear  Int?
  dateFinishedMonth Int?
  dateFinishedDay   Int?
  dateUpdated       DateTime  @updatedAt
  totalDaysRead     Int?
  primary           Boolean   @default(false)
  primaryAdded      DateTime?
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  book              Book      @relation(fields: [bookId], references: [id], onDelete: Cascade)

  @@id([userId, bookId])
}

// User, Account, Session, and VerificationToken are all schema for next.js auth 
// the library schema can be found: PROVIDE THE URL HERE
model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  birthOfDate   DateTime?  @map("bod")
  image         String?
  password      String?
  username      String?    @unique
  account       Account[]
  sessions      Session[]
  books         UserBook[]
  ratings       Rating[]

  @@unique([id, email])
  @@index([id], type: Hash)
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Relationships:
// User and Book:

// A many-to-many relationship exists between users and books.
// This relationship is established through the intermediary UserBook model.
// User and Rating:

// A one-to-one relationship exists between a user-book pairing and a rating. A user can rate a specific book only once.
// User and Log:

// A one-to-many relationship exists between a user-book pairing and logs. A user can have multiple log entries for a single book.
// User and Bookmark:

// A one-to-many relationship exists between a user and bookmarks. A user can have multiple bookmarks.
// User and Account:

// A one-to-many relationship exists between a user and accounts. A user can be associated with multiple third-party accounts.
// User and Session:

// A one-to-many relationship exists between a user and sessions. A user can have multiple active sessions.
// Usage Scenarios:
// Users can maintain a list of books they want to read, are currently reading, or have finished.
// Users can rate books and update their ratings.
// Users can log their reading progress for a book.
// Users can track their reading state for a book: whether they want to read it, are currently reading it, or have finished it.
// Users can create bookmarks.
